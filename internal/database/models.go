// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0

package database

import (
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type Punishtype string

const (
	PunishtypeBAN  Punishtype = "BAN"
	PunishtypeMUTE Punishtype = "MUTE"
)

func (e *Punishtype) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Punishtype(s)
	case string:
		*e = Punishtype(s)
	default:
		return fmt.Errorf("unsupported scan type for Punishtype: %T", src)
	}
	return nil
}

type NullPunishtype struct {
	Punishtype Punishtype
	Valid      bool // Valid is true if Punishtype is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPunishtype) Scan(value interface{}) error {
	if value == nil {
		ns.Punishtype, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Punishtype.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPunishtype) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Punishtype), nil
}

type LookupUser struct {
	UserUuid uuid.UUID
	UserName string
}

type PunishedUser struct {
	ID         int32
	UserUuid   uuid.UUID
	Reason     string
	DoneBy     string
	PunishType Punishtype
	TimeEnds   time.Time
}
